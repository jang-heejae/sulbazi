<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sulbazi.review.ReviewDAO">
	<!-- 신고 당한 리뷰 내용 내용뽑아오기 -->
	<select id="reportedIdx" parameterType="int" resultType="String">
    	SELECT review_content FROM review WHERE review_idx = #{reported_idx}
	</select>
	
	<!-- 리뷰 가져오기 내림차순 조인 4 개 리뷰 좋아요 까지 포함됨  -->
<select id="getReviewAlluser" parameterType="int" resultType="com.sulbazi.review.ReviewDTO">
    SELECT 
        r.review_idx,
        r.store_idx,
        r.review_content,
        r.review_date,
        r.starpoint,
        r.review_state,
        u.user_id,
        u.user_nickname,
        u.user_likecount,
        u.user_photo,
        rc.comm_date,
        rc.comm_content,
        COUNT(rl.user_id) AS like_count,
        GROUP_CONCAT(rl.user_id) AS like_user_ids,
        (
            SELECT GROUP_CONCAT(co.opt_name SEPARATOR ', ') 
            FROM review_category AS rcg 
            JOIN category_opt AS co ON rcg.opt_idx = co.opt_idx 
            WHERE rcg.review_idx = r.review_idx
        ) AS opt_names,
        (
            SELECT GROUP_CONCAT(p.new_filename) 
            FROM photo AS p
            WHERE p.photo_category_idx = 3 
            AND p.photo_folder_idx = r.review_idx
        ) AS review_photos
    FROM 
        review AS r
    INNER JOIN 
        user AS u ON r.user_id = u.user_id
    LEFT JOIN 
        review_comm AS rc ON r.review_idx = rc.review_idx
    LEFT JOIN 
        review_like AS rl ON r.review_idx = rl.review_idx
    WHERE 
        r.store_idx = #{param1}
        AND r.review_state = 1
    GROUP BY 
        r.review_idx, r.store_idx, r.review_content, r.review_date, r.starpoint, r.review_state, 
        u.user_id,u.user_nickname, u.user_likecount, u.user_photo, rc.comm_date, rc.comm_content
    ORDER BY 
        r.review_idx DESC
</select>
	<!-- 리뷰 쓰기 -->
	<insert 
	useGeneratedKeys="true"
	keyColumn="review_idx"
	keyProperty="review_idx"
	id="reviewWriteDo" parameterType="com.sulbazi.review.ReviewDTO">
		INSERT INTO review (user_id, store_idx, review_content,starpoint)
       		 VALUES (#{user_id}, #{store_idx}, #{review_content},#{starpoint})
	</insert>
	
	<!-- 리뷰 답글 -->
	 <insert id="reply" parameterType="map">
	 	insert into review_comm (review_idx,store_idx,comm_content)
	 		values(#{review_idx},#{store_idx},#{comm_content})
	 </insert>

	 <!-- 리뷰 답글 수정 -pk 걸려있어서 수정밖에 안됨요  -->
	 <update id="replyUpdate" parameterType="map">
	    update review_comm 
	    set comm_content = #{comm_content}
	    where review_idx = #{review_idx}
	 </update>
	 <!-- 리뷰 답글 삭제  -->
	 <delete id="replyDel" parameterType="map">
    	DELETE FROM review_comm
			WHERE review_idx = #{review_idx}
	 </delete>
	 <!-- 매장 평균 별점 -->
	 <update id="storeAvg" parameterType="map">
	    UPDATE store
	    SET star_average = (SELECT CEIL(AVG(starpoint) * 100) / 100.0 FROM review WHERE store_idx = #{storeIdx})
	    WHERE store_idx = #{storeIdx}
	 </update>
	 <!-- 리뷰 업데이트 -->
	 <update id="reviewUpdate" parameterType="map">
	    UPDATE review
	    SET 
	        review_content = #{reviewContent},
	        starpoint = #{ratingValue},
	        review_date = NOW()
	    WHERE review_idx = #{reviewIdx}
	 </update>
	 
	   <!-- 리뷰 삭제 상태 바꾸기 업데이트 -->
    <update id="reviewDelUpdate" parameterType="map">
		UPDATE review
		SET review_state = 0
		WHERE review_idx = #{reviewIdx}
    </update>
	   <!-- 리뷰 좋아요 -->
    <insert id="reviewLike" parameterType="map">
		INSERT INTO review_like (review_idx, user_id)
       		 VALUES (#{reviewIdx}, #{loginId})
    </insert>
	
	   <!-- 리뷰 좋아요 중복체크 -->
	<select id="reviewCount" parameterType="map">
	    SELECT COUNT(review_idx) 
	    FROM review_like 
	    WHERE review_idx = #{reviewIdx} AND user_id = #{loginId}
	</select>
	<!-- 좋아요 중복 삭제 -->
	<delete id="reviewLikeDel" parameterType="map">
    	DELETE FROM review_like
			WHERE review_idx = #{reviewIdx} and user_id = #{loginId}
	</delete>
	

	 <select id="allStoreCount" parameterType="map" resultType="int">
    	SELECT CEIL(COUNT(*) / #{cnt}) FROM review WHERE store_idx = #{store_idx} AND review_state = 1
	</select>
	 <!-- 유저 마이페이지 나의 리뷰 -->
	<select id="allCount" parameterType="map" resultType="int">
    	SELECT CEIL(COUNT(*) / #{cnt}) FROM review WHERE user_id = #{user_id} AND review_state = 1
	</select>
	<select id="userReview" parameterType="map" resultType="com.sulbazi.review.ReviewDTO">
    	SELECT 
        	r.review_idx,
        	r.store_idx,
        	r.review_content,
        	r.review_date,
        	r.starpoint,
        	r.review_state,
        	u.user_nickname,
        	u.user_likecount,
        	u.user_photo,
        	rc.comm_date,
        	rc.comm_content,
        	COUNT(rl.user_id) AS like_count,
        	s.store_name,        
        	s.store_address,    
        	(
            	SELECT GROUP_CONCAT(co.opt_name SEPARATOR ' #') 
            	FROM review_category AS rcg 
            	JOIN category_opt AS co ON rcg.opt_idx = co.opt_idx 
            	WHERE rcg.review_idx = r.review_idx
        	) AS opt_names,
        	(
            	SELECT GROUP_CONCAT(p.new_filename) 
            	FROM photo AS p
           		WHERE p.photo_category_idx = 3 
            	AND p.photo_folder_idx = r.review_idx
        	) AS review_photos
    	FROM 
       	 	review AS r
    	INNER JOIN 
        	user AS u ON r.user_id = u.user_id
    	INNER JOIN 
        	store AS s ON r.store_idx = s.store_idx  
    	LEFT JOIN 
        	review_comm AS rc ON r.review_idx = rc.review_idx
    	LEFT JOIN 
        	review_like AS rl ON r.review_idx = rl.review_idx
    	WHERE 
        	r.user_id = #{user_id}
        	AND r.review_state = 1
    	GROUP BY 
        	r.review_idx, r.store_idx, r.review_content, r.review_date, r.starpoint, r.review_state, 
        	u.user_nickname, u.user_likecount, u.user_photo, rc.comm_date, rc.comm_content,
        	s.store_name, s.store_address 
    	ORDER BY 
        	r.review_idx DESC
    	LIMIT #{limit} OFFSET #{offset}
</select>
<!-- 매장 마이페이지 리뷰목록 페이지네이션 -->
<select id="getReviewAlluser2" parameterType="map" resultType="com.sulbazi.review.ReviewDTO">
    SELECT 
        r.review_idx,
        r.store_idx,
        r.review_content,
        r.review_date,
        r.starpoint,
        r.review_state,
        u.user_id,
        u.user_nickname,
        u.user_likecount,
        u.user_photo,
        rc.comm_date,
        rc.comm_content,
        COUNT(rl.user_id) AS like_count,
        GROUP_CONCAT(rl.user_id) AS like_user_ids,
        (
            SELECT GROUP_CONCAT(co.opt_name SEPARATOR ', ') 
            FROM review_category AS rcg 
            JOIN category_opt AS co ON rcg.opt_idx = co.opt_idx 
            WHERE rcg.review_idx = r.review_idx
        ) AS opt_names,
        (
            SELECT GROUP_CONCAT(p.new_filename) 
            FROM photo AS p
            WHERE p.photo_category_idx = 3 
            AND p.photo_folder_idx = r.review_idx
        ) AS review_photos
    FROM 
        review AS r
    INNER JOIN 
        user AS u ON r.user_id = u.user_id
    LEFT JOIN 
        review_comm AS rc ON r.review_idx = rc.review_idx
    LEFT JOIN 
        review_like AS rl ON r.review_idx = rl.review_idx
    WHERE 
        r.store_idx = #{store_idx}
        AND r.review_state = 1
    GROUP BY 
        r.review_idx, r.store_idx, r.review_content, r.review_date, r.starpoint, r.review_state, 
        u.user_id,u.user_nickname, u.user_likecount, u.user_photo, rc.comm_date, rc.comm_content
    ORDER BY 
        r.review_idx DESC
        LIMIT #{limit} OFFSET #{offset}
</select>
	
	<!-- 리뷰 유저 이름 -->
	<select id="reviewusername" resultType="String" >
		SELECT user_name FROM user WHERE user_id=#{param1}
	</select>
	
	
	<!-- 매장 마이페이지 리뷰 확인 -->
	<select id="storelookreview" resultType="com.sulbazi.review.ReviewDTO">
		SELECT * 
		FROM
		 	review 
		INNER JOIN 
		 	review_comm ON review.review_idx=review_comm.review_idx
		 INNER JOIN 
		 	user ON review.user_id=user.user_id
		WHERE review_comm.store_idx=#{param1}
	</select>
	
	 <!-- 리뷰 썻었는지 찾기   -->
	<select id="dontWrite" parameterType="map" resultType="com.sulbazi.review.ReviewDTO">
		select * from review where user_id = #{loginId} and store_idx = #{storeIdx}
	</select>
	
	
	
</mapper>