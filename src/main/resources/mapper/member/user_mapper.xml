<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sulbazi.member.UserDAO">
	<select id="files" resultType="com.sulbazi.member.UserDTO">
		SELECT * FROM user WHERE user_id = #{user_id}
	</select>
	<!-- 유저정보 -->
	<select id="getUserInfo" resultType="com.sulbazi.member.UserDTO">
    	SELECT * FROM user WHERE user_id = #{user_id}
	</select>
	<!-- 유저가 선택한 카테고리 가져오기 -->
	<select id="getUserCategories" resultType="hashMap">
    	SELECT opt_idx 
    	FROM user_category
    	WHERE user_id = #{user_id}
	</select>
	<!-- 모든 카테고리 가져오기 -->
	<select id="getAllCategories" resultType="hashMap">
    	SELECT category_idx, opt_idx, opt_name
    	FROM category_opt
    	WHERE category_state = 1
	</select>
	<!-- 회원 정보수정 -->
	<update id="userUpdate" parameterType="com.sulbazi.member.UserDTO">
    	UPDATE user
    	<set>
        	<if test="user_pw != null and user_pw != ''">
            	user_pw = #{user_pw},
        	</if>
        	<if test="user_nickname != null and user_nickname != ''">
            	user_nickname = #{user_nickname},
        	</if>
        	<if test="user_phone != null and user_phone != ''">
            	user_phone = #{user_phone},
        	</if>
        	<if test="user_photo != null and user_photo != ''">
            	user_photo = #{user_photo},
        	</if>
    	</set> 
    	WHERE user_id = #{user_id}
	</update>
	<!-- 닉네임 중복확인 -->
	<select id="overlay" resultType="int">
    	SELECT COUNT(user_nickname) FROM user WHERE user_nickname = #{param1}
	</select>
	<!-- user_id 기반 북마크 한 store_idx 뽑기 -->
	<select id="userBookmark" parameterType="com.sulbazi.member.BookMarkDTO">
		SELECT store_idx FROM bookmark WHERE user_id = #{user_id} ORDER BY bookmark_date DESC
	</select>
	<!-- store 카테고리 뽑아오기 -->
	<select id="storeOptName" parameterType="map" resultType="map">
    SELECT 
        b.store_idx,
        co.opt_name
    FROM 
        bookmark b
    JOIN 
        store_category sc ON b.store_idx = sc.store_idx
    JOIN 
        category_opt co ON sc.opt_idx = co.opt_idx
    WHERE 
        b.user_id = #{user_id}
    ORDER BY 
        b.bookmark_date DESC
</select>
	<!-- user_id 가 작성한 리뷰 뽑기 -->
	<select id="userReview" parameterType="com.sulbazi.review.ReviewDTO">
		SELECT * FROM review WHERE user_id = #{user_id} ANd review_state = 1 ORDER BY review_date DESC
	</select>
	
	<!-- 유저 상세보기 -->
<select id="userDetail" resultType="com.sulbazi.member.UserDTO">
      SELECT * FROM user where user_nickname = #{param1}
</select>
	
   <select id="userGetCategory" resultType="hashMap">
    SELECT * 
    FROM category_opt 
    WHERE opt_idx IN 
	    <foreach item="item" index="index" collection="opt_idx" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</select>

	
	<!-- 채팅 신고 기능 -->
	<!-- 신고한 횟수 -->
	<update id="report">
		UPDATE user SET user_reportno = #{reporting} WHERE user_id = #{reporting_id}
	</update>
	
	<!-- 신고당한 횟수 -->
	<update id="reported">
		UPDATE user SET user_reportedcases = #{reported} WHERE user_id = #{reported_id}
	</update>
	
	<!-- 채팅방 주인(닉네임, 사진) -->
	<select id="user" resultType="com.sulbazi.member.UserDTO">
		SELECT user_nickname, user_photo FROM user WHERE user_id = #{user_id}
	</select>
	
	<!-- 유저 좋아요 눌렀는지 찾기 -->
	<select id="userLike" parameterType="map" resultType="int">
	    SELECT count(user_id) 
	    FROM user_like 
	    WHERE user_id = #{loginId} AND pressed_id = #{userId}
	</select>
	
	<!-- 유저 좋아요 누를때 인서트 되는 것 -->
	<insert id="insertLike" parameterType="map">
		INSERT INTO user_like(user_id,pressed_id)
			VALUES (#{loginId},#{userId});
	</insert>
	<!-- 유저 좋아요 삭제 -->
	<delete id="userLikeDel" parameterType="map">
		DELETE FROM user_like WHERE user_id = #{loginId} AND pressed_id = #{userId};
	</delete>
	<!-- 유저 테이블 총라이크 업데이트 -->
	<update id="userUpdateLike" parameterType="map">
		UPDATE user
		SET user_likecount = (
		    SELECT COUNT(pressed_id) 
		    FROM user_like 
		    WHERE pressed_id = #{userId}
		)
		WHERE user_id = #{userId};
	</update>
	
	<!-- 유저 프로필 상세보기 가져오기 -->
	<select id="letItgo" parameterType="map" resultType="com.sulbazi.member.UserDTO">
SELECT 
	u.user_id,
    u.user_nickname,
    u.user_gender,
    u.user_likecount,
    u.user_photo,
    GROUP_CONCAT(co.opt_name) AS opt_name,
    GROUP_CONCAT(uc.opt_idx) AS opt_idx
FROM 
    user u
LEFT JOIN 
    user_category uc ON u.user_id = uc.user_id
LEFT JOIN 
    category_opt co ON uc.opt_idx = co.opt_idx
WHERE 
    u.user_id = #{userId}
GROUP BY 
    u.user_id
	</select>
	
	<!-- 유저 프로필 유저 좋아요 가죠와 -->
	<select id="gogoLike" parameterType="map" resultType="int">
		select count(pressed_id) from user_like ul where user_id = #{userId} and pressed_id = #{loginId}
	</select>
	<!-- 종원 유저좋아요 삭제 2 -->
	<delete id="gogoLikeDel" parameterType="map">
		DELETE FROM user_like WHERE user_id = #{loginId} AND pressed_id = #{userId}
	</delete>
	<!-- 좋원 유저 좋아요 2인서트 -->
	<insert id="gogoLikeInsert" parameterType="map">
		INSERT INTO user_like(user_id,pressed_id)
			VALUES (#{loginId},#{userId})
	</insert>
</mapper>